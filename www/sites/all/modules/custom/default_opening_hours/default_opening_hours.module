<?php

/**
 * @file
 * Main module code for Default Opening Hours.
 */

/**
 * Implements hook_form_alter().
 */
function default_opening_hours_form_node_form_alter(&$form, &$form_state) {
  $node = $form_state['node'];

  if (in_array($node->type, array('location', 'destination'))) {
    $fs = array(
      '#type' => 'fieldset',
      '#title' => t('Default Opening Hours'),
      '#description' => t('Expected time format is HH:MM, in 24 hour format.'),
      '#tree' => TRUE,
      '#theme' => 'default_opening_hours_field',
    );

    $days = array(
      'mon_instance_id' => t('Monday'),
      'tue_instance_id' => t('Tuesday'),
      'wed_instance_id' => t('Wednesday'),
      'thu_instance_id' => t('Thursday'),
      'fri_instance_id' => t('Friday'),
      'sat_instance_id' => t('Saturday'),
      'sun_instance_id' => t('Sunday'),
    );

    foreach ($days as $day => $label) {
      $value = isset($node->default_opening_hours[$day]) ? $node->default_opening_hours[$day] : NULL;

      $fs[$day] = array(
        '#type' => 'fieldset',
        '#title' => $label,
      );
      $fs[$day]['start_time'] = array(
        '#type' => 'textfield',
        '#title' => t('Start Time'),
        '#default_value' => $value ? $value['start_time'] : '',
      );
      $fs[$day]['end_time'] = array(
        '#type' => 'textfield',
        '#title' => t('End Time'),
        '#default_value' => $value ? $value['end_time'] : '',
      );
      $fs[$day]['instance_id'] = array(
        '#type' => 'value',
        '#value' => $value ? $value['instance_id'] : NULL,
      );
    }

    $form['default_opening_hours'] = $fs;
  }
}

/**
 * Implements hook_node_load().
 */
function default_opening_hours_node_load($nodes, $types) {
  $days = array(
    'mon_instance_id',
    'tue_instance_id',
    'wed_instance_id',
    'thu_instance_id',
    'fri_instance_id',
    'sat_instance_id',
    'sun_instance_id',
  );

  foreach ($nodes as $node) {
    $ids = db_select('default_opening_hours', 'd')
      ->condition('nid', $node->nid)
      ->fields('d')
      ->execute()
      ->fetchAssoc();

    if (is_array($ids)) {
      unset($ids['nid']);
    }
    else {
      $ids = array();
    }

    $values = array();
    foreach ($days as $day) {
      if (isset($ids[$day]) && ($instance = opening_hours_instance_load($ids[$day]))) {
        $values[$day] = array(
          'instance_id' => $instance->id,
          'start_time' => $instance->start_time,
          'end_time' => $instance->end_time,
        );
      }
      else {
        $values[$day] = NULL;
      }
    }
    $nodes[$node->nid]->default_opening_hours = $values;
  }
}

/**
 * Implements hook_node_insert().
 */
function default_opening_hours_node_insert($node) {
  _default_opening_hours_create_defaults($node);
}

function _default_opening_hours_create_defaults($node) {
  $days = array(
    0 => 'sun_instance_id',
    1 => 'mon_instance_id',
    2 => 'tue_instance_id',
    3 => 'wed_instance_id',
    4 => 'thu_instance_id',
    5 => 'fri_instance_id',
    6 => 'sat_instance_id',
  );


  $date_prefix = date_create()->format('Y-m');
  // OP-77: Until we define/implement a UI, enter the final date of the session/quarter
  $to_date = date_create('2016-06-30')->format('Y-m-d');

  $record = array(
    'nid' => $node->nid,
  );

  for ($i = 1; $i <= 7; $i++) {
    // Build the date of the i th day of the month.
    $date = $date_prefix  . "-0$i";

    // Find what day of the week it is.
    $dow = date_create($date)->format('w');

    // Get the day field we need to read.
    $field = $days[$dow];

    if (isset($node->default_opening_hours[$field])) {
      $value = $node->default_opening_hours[$field];

      if (!empty($value['start_time']) && !empty($value['end_time'])) {
        // At the very least, we must have nid, date, start_time and end_time set.
        $instance = (object)$value;
        $instance->nid = $node->nid;
        $instance->date = $date;
        $instance->repeat_rule = 'weekly';
        $instance->repeat_end_date = $to_date;
        if (drupal_write_record('opening_hours', $instance) === SAVED_NEW) {
          default_opening_hours_repeat_instance_propagate($instance);
          $record[$field] = $instance->instance_id;
        }
      }
    }
  }

  db_delete('default_opening_hours')
    ->condition('nid', $node->nid)
    ->execute();
  drupal_write_record('default_opening_hours', $record);

  cache_clear_all('opening_hours_present_on_node', 'cache');
}

/**
 * Implements hook_node_update().
 */
function default_opening_hours_node_update($node) {
  _default_opening_hours_delete_defaults($node);
  _default_opening_hours_create_defaults($node);
}

/**
 * Implements hook_node_delete().
 */
function default_opening_hours_node_delete($node) {
  db_delete('default_opening_hours')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * @param $node
 */
function _default_opening_hours_delete_defaults($node) {
  if (isset($node->default_opening_hours) && is_array($node->default_opening_hours)) {
    module_load_include('pages.inc', 'opening_hours', 'includes/opening_hours');
    foreach ($node->default_opening_hours as $value) {
      if (isset($value['instance_id']) && $value['instance_id'] && ($instance = opening_hours_instance_load($value['instance_id']))) {
        _default_opening_hours_instance_delete($value['instance_id']);
      }
    }
  }
}

/**
 * @param $instance_id
 */
function _default_opening_hours_instance_delete($instance_id) {
  db_query("
    DELETE FROM {opening_hours}
    WHERE instance_id = :id OR original_instance_id = :id2
      AND (customised = 0 OR customised IS NULL)
    ", array(
    ':id' => $instance_id,
    ':id2' => $instance_id,
  ));
}

/**
 * Implements hook_node_validate().
 */
function default_opening_hours_node_validate($node, $form, &$form_state) {
  $fields = array('start_time', 'end_time');
  if (isset($node->default_opening_hours) && is_array($node->default_opening_hours)) {
    foreach ($node->default_opening_hours as $day => $value) {
      if (!empty($value['start_time']) && empty($value['end_time'])) {
        form_error($form['default_opening_hours'][$day]['end_time'], t('End time is required'));
      }
      if (empty($value['start_time']) && !empty($value['end_time'])) {
        form_error($form['default_opening_hours'][$day]['start_time'], t('Start time is required'));
      }

      if (!empty($value['start_time']) && !empty($value['end_time'])) {
        foreach ($fields as $field) {
          $matches = array();
          if (preg_match('/^([0-9]{2}):([0-9]{2})$/', $value[$field], $matches)) {
            if ((int)$matches[1] > 23) {
              form_error($form['default_opening_hours'][$day][$field], t('Hour out of range'));
            }
            if ((int)$matches[2] > 59) {
              form_error($form['default_opening_hours'][$day][$field], t('Minute out of range'));
            }
          }
          else {
            form_error($form['default_opening_hours'][$day][$field], t('Time format invalid.'));
          }
        }
      }
    }
  }
}

/**
 * Propagates a repeating instance.
 *
 * Makes copies of the event each time it repeats until either the
 * repeat rule ends or two years have passed.
 */
function default_opening_hours_repeat_instance_propagate(&$instance) {
  // Maximum limit is about two years in the future.
  $limit = $_SERVER['REQUEST_TIME'] + 365 * 86400;

  // Set up the increment for the repeat rule.
  if ($instance->repeat_rule == 'weekly') {
    $increment = 7 * 86400;
  }

  if (!empty($instance->repeat_end_date)) {
    // Use noon on the date when converting to timestamp to dodge
    // daylight savings issues.
    $end_date = strtotime($instance->repeat_end_date . 'T12:00:00');

    // If the end date is before the limit, it becomes the new limit.
    if ($end_date && $end_date < $limit) {
      $limit = $end_date;
    }
  }

  // Bail if we don't have an increment.
  if (empty($increment) || $increment < 2) {
    return;
  }

  $current_date = strtotime($instance->date . 'T12:00:00');

  // Figure out how far the instance has already been propagated, and
  // start there.
  $start_point_date = db_query('
    SELECT MAX(date) FROM {opening_hours} WHERE original_instance_id = :id
      AND (customised = 0 OR customised IS NULL)
  ', array(':id' => $instance->instance_id))->fetchField();

  if ($start_point_date) {
    $start_point_date = strtotime($start_point_date . 'T12:00:00');

    // If our start point is later than the current date, use that when
    // iterating, so we don't generate duplicate entries.
    if ($start_point_date > $current_date) {
      $current_date = $start_point_date;
    }
  }

  while ($current_date < $limit) {
    $current_date += $increment;

    $current_date_str = date('Y-m-d', $current_date);

    // Generate the new propagated instance.
    $propagated = (object) array(
      'nid' => $instance->nid,
      'date' => $current_date_str,
      'start_time' => $instance->start_time,
      'end_time' => $instance->end_time,
      'original_instance_id' => $instance->instance_id,
      'customised' => 0,
    );

    // Propagate the category_tid, if set.
    if (!empty($instance->category_tid)) {
      $propagated->category_tid = $instance->category_tid;
    }

    // Propagate the notice, if set.
    if (!empty($instance->notice)) {
      $propagated->notice = $instance->notice;
    }

    // Don't override customized instances.
    $existing = db_query("SELECT 1 FROM {opening_hours}
      WHERE nid = :nid AND date = :date
      ",
      array(':nid' => $instance->nid, ':date' => $current_date_str))
      ->fetchField();

    if (!$existing) {
      drupal_write_record('opening_hours', $propagated);
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function default_opening_hours_field_extra_fields() {
  $return = array();

  $entity_type = 'node';
  $entity_info = entity_get_info($entity_type);
  foreach (array_keys($entity_info['bundles']) as $bundle) {
    $return[$entity_type][$bundle]['form']['default_opening_hours'] = array(
      'label' => t('Default opening hours'),
      'weight' => 5,
    );

    $return[$entity_type][$bundle]['display']['default_opening_hours'] = array(
      'label' => t('Default opening hours'),
      'weight' => 5,
    );
  }

  return $return;
}

/**
 * Implements hook_theme().
 */
function default_opening_hours_theme() {
  $return = array();

  $return['default_opening_hours_field'] = array(
    'render element' => 'element',
  );

  return $return;
}

/**
 * @param $vars
 * @return string
 */
function theme_default_opening_hours_field($vars) {
  $element = $vars['element'];

  $days = array(
    'mon_instance_id' => t('Monday'),
    'tue_instance_id' => t('Tuesday'),
    'wed_instance_id' => t('Wednesday'),
    'thu_instance_id' => t('Thursday'),
    'fri_instance_id' => t('Friday'),
    'sat_instance_id' => t('Saturday'),
    'sun_instance_id' => t('Sunday'),
  );

  $header = array('label' => t('Day')) + array_values($days);
  $rows = array();

  $fields = array(
    'start_time' => t('Start'),
    'end_time' => t('End'),
  );
  foreach ($fields as $field => $field_label) {
    $row = array($field_label);
    foreach ($days as $day => $day_label) {
      $element[$day][$field]['#title_display'] = 'none';
      $row[] = render($element[$day][$field]);
    }
    $rows[] = $row;
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));

  return $output;
}

/**
 * Implements hook_cron().
 */
function default_opening_hours_cron() {
  $results = db_select('default_opening_hours', 'd')
    ->fields('d')
    ->execute();

  foreach ($results as $result) {
    if ($node = node_load($result->nid)) {
      default_opening_hours_node_update($node);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function default_opening_hours_views_api() {
  return array(
    'api' => 3,
  );
}
